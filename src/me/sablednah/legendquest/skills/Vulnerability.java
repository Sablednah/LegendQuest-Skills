package me.sablednah.legendquest.skills;

import java.util.ArrayList;

import me.sablednah.legendquest.events.CombatModifiers;
import org.bukkit.Material;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.inventory.EntityEquipment;

@SkillManifest(
	name = "Vulnerability", type = SkillType.TRIGGERED, author = "SableDnah", version = 1.0D, 
	description = "Damage inflicted by [weapon] inflicts an extra [damage], [chance] percent of the time to this player", 
	consumes = "", manaCost = 0, 
	levelRequired = 0, skillPoints = 0, 
	buildup = 0, delay = 0, duration = 0, cooldown = 0, 
	dblvarnames = { "chance" }, dblvarvalues = { 90.5 }, 
	intvarnames = { "damage" }, intvarvalues = { 5 }, 
	strvarnames = { "weapons" }, 
	strvarvalues = { "WOOD_SWORD,WOOD_PICKAXE,WOOD_HOE,WOOD_AXE" }
)

public class Vulnerability extends Skill implements Listener {
	public boolean onEnable() {
		return true;
	}

	public void onDisable() { /* nothing to do */
	}

	public CommandResult onCommand(Player p) { // does not require command
		System.out.print("WeaponMaster skill: is not a command!");
		return CommandResult.NOTAVAILABLE;
	}

	@EventHandler
	public void doDmg(CombatModifiers event) {
// System.out.print("Vulnerability skill: processing...");

		if (!(event.getDamager() instanceof LivingEntity)) { return; }
 
// System.out.print("Vulnerability skill: isLiving... - ");

 		if ((event.getVictim() instanceof Player)) {
// System.out.print("Vulnerability skill: isPlayer...");
			Player p = (Player) event.getVictim();

// System.out.print("Vulnerability skill: p = " + p);
			
			if (!validSkillUser(p)) {
				return;
			}
//  System.out.print("Vulnerability skill: valid player..." + p.getUniqueId()+toString());

			// load skill options
			SkillDataStore data = this.getPlayerSkillData(p);

			ArrayList<Material> weapons = new ArrayList<Material>();
			String w = ((String) data.vars.get("weapons"));
//System.out.print("Vulnerability skill: " + w);
			String[] list = w.split("\\s*,\\s*");
			for (String s : list) {
//System.out.print("Vulnerability skill: adding - " + s);
				weapons.add(Material.matchMaterial(s));
			}
			
			Material handitem = null;
			if (event.getDamager() instanceof Player) {
				handitem = ((Player)event.getDamager()).getItemInHand().getType();
			} else {
				EntityEquipment ee = ((LivingEntity)event.getDamager()).getEquipment();
				handitem = ee.getItemInHand().getType();
			}
			if (handitem != null) {
// System.out.print("Vulnerability skill: looking for - " + handitem);
				if ((weapons.contains(handitem)) ) {
					double chance = ((Double) data.vars.get("chance")) / 100.0D;
					if (Math.random() <= chance) {
						Integer dmg = ((Integer) data.vars.get("damage"));
						event.setPower(event.getPower() + dmg);
					}
				}
			}
		}
	}
}
